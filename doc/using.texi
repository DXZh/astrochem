@cindex usage, example of astrochem

This chapter describes how to use Astrochem on a simple problem. We
compute the abundances in a isodense and isoterm cold molecular cloud,
that is shielded from the interstellar radiation field.

@menu
* Describing the problem::      
* Running Astrochem::           
* Plotting abundances::         
@end menu

@node Describing the problem
@section Describing the problem
@cindex describing the problem
@cindex input file, example of
@cindex @code{.ini} file, example of
@cindex source file, example of
@cindex @code{.mdl} file, example of

Astrochem expect an a input file describing the problem. The file has
several sections, that set the physical parameters (e.g . the cosmic
ionization rate), the solver parameters (e.g. the absolute and relative
tolerances), the initial abundances, and what the user wants in output
(which species). Some of these parameters are optional; if they are not
specified in the input file, Astrochem will use a default value that
should be suitable for most problems. Here we show an example of a
minimal input file. For a complete description of the parameters in
input files, @pxref{Input file}. The input file for our problem looks
like this:

@example
@verbatiminclude examples/input.ini
@end example

@noindent
Sections are indicated by keywords in brackets. Lines starting with
@code{#} are comment lines. The @code{[files]} section indicate the name
of the file describing our source (@code{source}, see below), and the
chemical network to use (@code{chem}). Here we use the
@file{osu2005.chm} network file, which correspond to the @uref{
http://www.physics.ohio-state.edu/~eric/research.html, Ohio State
University Astrochemistry database}. Note that this network is included
with Astrochem. The user may also write his own network; see
@pxref{Chemical networks}. The following section @code{[phys]} sets the
physical parameters of the source. Here we set the interstellar
radiation field to 0.2 (in Habing units), and the cosmic ionization rate
to @math{3 \times 10^{-17} s^{-1}}. The solver parameters are set in
next section (@code{solver}). @code{ti} and @code{tf} are the initial
and final time for the calculation (in years),
respectively. @code{abs_err} and @code{rel_err} are the absolute and
relative tolerances for the solver. For each specie, the solver will try
to reach a precision that is either lower than @code{rel_err} (in
relative), or greater than @code{abs_err} (in absolute). This prevent
the solver to reach a very high precision for species that have very
small abundances, which would be time consuming. An absolute error of
@math{10^{-15}} and a relative error of @math{10^{-6}} should be
adequate for most problem. The @code{[abundance]} section sets the
initial abundances. The name of the species should correspond to those
in the chemical network file. Abundances that are not specified are set
to zero. The last section (@code{[output]}) sets parameters relative to
the output of the code. @code{abundances} set the name of the species
that we want to compute. This is a list of comma separated specie,
without spaces.

In addition to the source file, we need to provide a file describing our
source. The file corresponding to our problem is the following:

@example
@verbatiminclude examples/source.mdl
@end example

As for the @code{ini} file, lines that starts with a @code{#} are
comments. The file contain each one line for each ``shell'' (or layer,
in plan parallel geometry). The first column is the index of the shell,
the second one is the visual extinction @math{A_{v}} (in
magnitudes). The third one is the number density, expressed in
@math{cm^{-3}}. The fourth ones are the gas and dust temperature
respectively (in Kelvin). In this simple example, our source is isodense
and isotherm, and therefore there is only one shell in the @code{mdl}
file. A more realistic source with a temperature and density gradient
would be sampled in more shells. Here we have adopted a large visual
extinction, that is suitable of a dense clouds shielded from the
interstellar radiation field.

@node Running Astrochem
@section Running Astrochem
@cindex running Astrochem, example of
@cindex @code{.abun} file, example of

Astrochem is run from the command line, ans takes the name of the
@code{ini} file as an argument.

@example
% astrochem input.ini
Reading input from input.ini.
Reading source model from source.mdl.
Reading reactions network from osu2005.chm... done.
Found 4424 reactions involving 451 species.
Computing abundances in shell 0...
Done with shell 0.
Writing abundances in output files... done.
%
@end example

This example produces the following files that contains the abundances
as a function of time for each shell: @file{H3(+).abun},
@file{HCO(+).abun}, @file{e.abun} and @file{CO.abun}. The
@file{HCO(+).abun} files looks like this:

@example
@verbatiminclude examples/HCO(+).abun
@end example

@noindent
The first three lines are comments. The third one lists the shell
indexes. The following lines gives the abundances as a function of time
for each shell; the first column indicates the time, and the following
ones the abundances for each shell. In our simple example, there is only
one shell, so the file has only two columns, one for the time, and one
for the shell number.

@node Plotting abundances
@section Plotting abundances
@cindex plotting abundances, example of

Astrochem comes with a program to plot the abundances computed by
Astrochem. The following command plot the @math{\rm CO}, @math{\rm
H_{3}^{+}}, @math{\rm HCO^{+}} and @math{\rm e^{-}} in our source as a
function of time.

@example
% plabun CO.abun  H3\(+\).abun  HCO\(+\).abun  e.abun
@end example

@iftex
@sp 1
@center @image{examples/abundances,3.5in}
@quotation
@center Abundance as a function of time for the example problem.
@end quotation
@end iftex

@c Local Variables: 
@c mode: texinfo
@c TeX-master: "astrochem"
@c End:




